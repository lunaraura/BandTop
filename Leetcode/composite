const canvas = document.getElementById('canvas');
const ctx = canvas.getContext("2d");
const solid = "solid";
const liquid = "liquid";
const gas = "gas";
const plasma = "plasma";

//      const composites =
//         what the monster is made up of: inner and outer composites
//composite name: matter state, toughness against blunt force, hardness against piercing/slashing,
//elastic against shock force/snap, heat/cold/chemical/electron resist, density slows down internal and external control force
//      const moveType
//          each move has values that affect composites
//how much x breaks through a y resist before taking damage:
//drill goes through 0.4 toughness, 0.3 hardness, and 0.8 elastic.
//      const species =
//          constitutes baseline composites with percentage change of variation
//baseStats. size: species' size. maxHP: density * individual size.
//physical atk = hardness * individual size. energy atk = energy * size.
//speed & castspeed = hardfixed base number to species, scaling down with individual's size
//defense = individual's outer layer composite (hardness + density + toughness) * size
//energy defense = outer composite same thing but with fire/cold/chem/electric resists
//      const speciesInnateVariation
//t: tolerance center, r:range. 0 +dir, 1 is -direction
//calculate innate with (random - tolerance) * range.
const composites = {
    stone:       {matter: solid,  tough: 0.30, hard: 0.8, energy: 0.0, elastic: 0.0, heatResist: 0.40, coldResist: 0.35, chemResist: 0.6,
        electroResist: 1.0, density: 0.75, name: "stone"},
    crystalline: {matter: solid,  tough: 0.15, hard: 0.9, energy: 0.0, elastic: 0.0, heatResist: 0.35, coldResist: 0.30, chemResist: 0.5,
        electroResist: 1.0, density: 0.75, name: "crystalline"},
    metal:       {matter: solid,  tough: 0.80, hard: 0.7, energy: 0.0, elastic: 0.2, heatResist: 0.45, coldResist: 0.50, chemResist: 0.55,
        electroResist: 0.1, density: 0.75, name: "metal"},
    //
    organicAnimal:{matter: solid, tough: 0.60, hard: 0.2, energy: 0.3, elastic: 0.7, heatResist: 0.30, coldResist: 0.25, chemResist: 0.20,
        electroResist: 0.3, density: 0.75, name: "organicAnimal"},
    organicPlant: {matter: solid, tough: 0.40, hard: 0.3, energy: 0.5, elastic: 0.6, heatResist: 0.25, coldResist: 0.20, chemResist: 0.15,
        electroResist: 0.4, density: 0.75, name: "organicPlant"},
    slime:       {matter: solid,  tough: 0.50, hard: 0.1, energy: 0.4, elastic: 1.0, heatResist: 0.30, coldResist: 0.30, chemResist: 0.15,
        electroResist: 0.2, density: 0.75, name: "slime"},
    //
    water:       {matter: liquid, tough: 0.00, hard: 0.0, energy: 0.5, elastic: 1.0, heatResist: 0.8, coldResist: 0.10, chemResist: 0,
        electroResist: 0.1, density: 0.75, name: "water"},
    lava:        {matter: liquid, tough: 0.60, hard: 0.2, energy: 0.7, elastic: 0.3, heatResist: 1.0, coldResist: 0.05, chemResist: 3,
        electroResist: 0.6, density: 0.75, name: "lava"},
    gas:         {matter: gas,    tough: 0.00, hard: 0.0, energy: 0.8, elastic: 1.0, heatResist: 0.2, coldResist: 0.10, chemResist: 0.3,
        electroResist: 0.6, density: 0.75, name: "gas"},
    fire:        {matter: plasma, tough: 0.00, hard: 0.0, energy: 0.9, elastic: 1.0, heatResist: 1.0, coldResist: 0.0, chemResist: 0.9,
        electroResist: 0.8, density: 0.75, name: "fire"},
    frost:       {matter: gas,    tough: 0.00, hard: 0.1, energy: 1.0, elastic: 0.0, heatResist: 0.0, coldResist: 1.0, chemResist: 0.9,
        electroResist: 0.8, density: 0.75, name: "frost"},
    arcane:      {matter: plasma, tough: 0.00, hard: 0.0, energy: 0.9, elastic: 1.0, heatResist: 1.0, coldResist: 0.0, chemResist: 0.9,
        electroResist: 0.5, density: 0.75, name: "arcane"},
}
const moveType = {
    electric: {matter: plasma, electro: 1.0}, 
    water: {matter: liquid, hard: 0.2, cold: 0.1},
    fire: {matter: plasma, heat: 0.9},
    cold: {matter: gas, cold: 0.9},
    corrode: {matter: liquid, hard: 0.5, chemical: 0.6},
    fumes: {matter: gas, chemical: 0.9},
    smash: {matter: solid, tough: 0.9, hard: 0.1, elastic: 0.2}, 
    slice: {matter: solid, tough: 0.1, hard: 0.9, elastic: 0.0},
    shockwave: {matter: solid, tough: 0.5, hard: 0.1, elastic: 0.5},
    drill: {matter: solid, tough: 0.2, hard: 0.1, elastic: 0.8},
}
const family = {
    canine: {baseIn: {type: composites.organicAnimal, variation: 0.1}, baseOut: {type: composites.organicAnimal, variation: 0.2}},
    feline: {baseIn: {type: composites.organicAnimal, variation: 0.1}, baseOut: {type: composites.organicAnimal, variation: 0.2}},
    reptile: {baseIn: {type: composites.organicAnimal, variation: 0.1}, baseOut: {type: composites.organicAnimal, variation: 0.2}},
    bird: {baseIn: {type: composites.organicAnimal, variation: 0.1}, baseOut: {type: composites.organicAnimal, variation: 0.2}},
    bug: {baseIn: {type: composites.organicAnimal, variation: 0.1}, baseOut: {type: composites.organicAnimal, variation: 0.2}},
    spectre: {baseIn: {type: composites.gas, variation: 0.0}, baseOut: {type: composites.gas, variation: 0.2}},
    elemental: {baseIn: {type: composites.arcane, variation: 0.0}, baseOut: {type: composites.organicAnimal, variation: 1.0}},
} 
const species = {
    dog: {name: "dog", family: family.canine, baseSize: 5},
    wolf: {name: "wolf", family: family.canine, baseSize: 5},
}
const speciesInnateVariation = {
    canine: {pAtk:{t: 0.5, r: 5}, eAtk:{t: 0.5, r: 1}, mHP: {t: 0.5, r: 10},
        spd: {t: 0.5, r: 1}, def: {t: 0.5, r: 1}, castSpd: {t: 0.5, r: 1}},
    feline: {pAtk:{t: 0.5, r: 5}, eAtk:{t: 0.5, r: 1}, mHP: {t: 0.5, r: 10},
        spd: {t: 0.5, r: 1}, def: {t: 0.5, r: 1}, castSpd: {t: 0.5, r: 1}},
    reptile: {pAtk:{t: 0.5, r: 5}, eAtk:{t: 0.5, r: 1}, mHP: {t: 0.5, r: 10},
        spd: {t: 0.5, r: 1}, def: {t: 0.5, r: 1}, castSpd: {t: 0.5, r: 1}},
    bird: {pAtk:{t: 0.5, r: 5}, eAtk:{t: 0.5, r: 1}, mHP: {t: 1, r: 10},
        spd: {t: 0.5, r: 1}, def: {t: 0.5, r: 1}, castSpd: {t: 0.5, r: 1}},
    bug: {pAtk:{t: 0.5, r: 5}, eAtk:{t: 0.5, r: 1}, mHP: {t: 1, r: 10},
        spd: {t: 0.5, r: 1}, def: {t: 0.5, r: 1}, castSpd: {t: 0.5, r: 1}},
    spectre: {pAtk:{t: 1, r: 5}, eAtk:{t: 0.5, r: 1}, mHP: {t: 1, r: 10},
        spd: {t: 0.5, r: 1}, def: {t: 0.5, r: 1}, castSpd: {t: 0.5, r: 1}},
    elemental: {pAtk:{t: 1, r: 5}, eAtk:{t: 0.5, r: 1}, mHP: {t: 1, r: 10},
        spd: {t: 0.5, r: 1}, def: {t: 0.5, r: 1}, castSpd: {t: 0.5, r: 1}},
}

//base values from the species, allowed range for the certain species.
//centerTolerance usually at 0.5 for -x to +x range.
//can be 0 for (0 to x) range or 1 for (-x to 0) range
function buildEntity(innerComposite, outerComposite, species, size) {
    let properties = {
        size: size,
        mHP: outerComposite.density * size,
        pAtk: outerComposite.hard * size,
        eAtk: outerComposite.energy * size,
        spd: Math.max(0.1, 1 / size), // Speed decreases with size
        castSpd: Math.max(0.1, 1 / size), // Casting speed decreases with size
        pdef: (outerComposite.hard + outerComposite.tough + outerComposite.density) * size,
        edef: (outerComposite.heatResist + outerComposite.coldResist + outerComposite.chemResist + outerComposite.electroResist) * size,
    };

    // Apply species innate variation
    if (speciesInnateVariation[species]) {
        let variation = speciesInnateVariation[species];
        Object.keys(variation).forEach(stat => {
            let { t, r } = variation[stat];
            properties[stat] += (Math.random() - t) * r;
        });
    }

    return properties;
}
const clamp01 = v => Math.max(0, Math.min(1, v));
function rollCompositesForFamily(fam) {
  const clampComposite = (obj, v) => {
    const out = {...obj};
    for (const k in out) if (typeof out[k] === 'number') out[k] = clamp01(out[k] + (Math.random()-0.5)*v);
    return out;
  };
  const inner = clampComposite(fam.baseIn.type, fam.baseIn.variation);
  const outer = clampComposite(fam.baseOut.type, fam.baseOut.variation);
  return { innerComposite: inner, outerComposite: outer };
}
function buildInnate(base, varSpec){
  const res = {};
  for (const k in base){
    const { t, r } = varSpec[k] || {t:0.5, r:0};
    res[k] = base[k] + (Math.random() - t) * r;
  }
  return res;
}
function deriveStats(inner, outer, speciesDef){
  const size = speciesDef.baseSize ?? 5;

  const mass   = (0.7*outer.density + 0.3*(inner.density ?? outer.density)) * size;
  const hard   = 0.6*outer.hard   + 0.4*(inner.hard   ?? outer.hard);
  const tough  = 0.7*outer.tough  + 0.3*(inner.tough  ?? outer.tough);
  const energy = 0.7*outer.energy + 0.3*(inner.energy ?? outer.energy);
  const elastic= 0.7*outer.elastic+ 0.3*(inner.elastic?? outer.elastic);

  const baseHP   = speciesDef.baseHP   ?? 100;
  const hp       = Math.round(baseHP + 30*mass + 10*tough);

  const pAtk     = 5 + size*(0.8*hard + 0.4*tough); 
  const eAtk     = 5 + size*(1.0*energy + 0.3*elastic);

  const pDef     = 2 + size*(0.5*hard + 0.7*tough + 0.5*outer.density);
  const eDefRaw  = (outer.heatResist + outer.coldResist + outer.chemResist + outer.electroResist);
  const eDef     = 2 + size*(0.8*eDefRaw);

  const baseSpd  = speciesDef.baseSpeed ?? 1.0;
  const baseCast = speciesDef.baseCast  ?? 1.0;
  const speed    = Math.max(0.25, baseSpd  * (1 / (1 + 0.18*size + 0.25*outer.density)) * (1 + 0.1*elastic));
  const castSpd  = Math.max(0.25, baseCast * (1 / (1 + 0.12*size + 0.10*outer.density)) * (1 + 0.05*energy));

  const kbResist = clamp01(0.5*outer.density + 0.4*tough);

  return { size, hpMax: hp, hp, pAtk, eAtk, pDef, eDef, speed, castSpd, kbResist };
}

function createEntity(specDef, varMap){
  const fam = specDef.family;
  if (!fam) throw new Error(`Unknown family ${specDef.family}`);
  const { innerComposite, outerComposite } = rollCompositesForFamily(fam);

  let stats = deriveStats(innerComposite, outerComposite, specDef);

  const famVar = varMap?.[specDef.family];
  if (famVar){
    const rolled = buildInnate(
      { pAtk:stats.pAtk, eAtk:stats.eAtk, hpMax:stats.hpMax, speed:stats.speed, castSpd:stats.castSpd,
        pDef:stats.pDef, eDef:stats.eDef },
      { pAtk:famVar.pAtk, eAtk:famVar.eAtk, hpMax:famVar.mHP, spd:famVar.spd, castSpd:famVar.castSpd,
        pDef:famVar.def,   eDef:famVar.def }
    );
    stats = { ...stats, ...rolled, hp: Math.min(rolled.hpMax ?? stats.hpMax, stats.hp) };
  }

  return {
    species: specDef.name,
    family : specDef.family,
    innerComposite,
    outerComposite,
    ...stats,
  };
}
const entity1 = createEntity(species.dog, family, speciesInnateVariation);
console.log(entity1)


class Entity {
    constructor (x, y){
        this.x = x;
        this.y = y;
        this.speed = 1;
        this.radius = 10;
    }
    moveTo(request) { //will be replaced by pathfinder in rblx
        let dist = Math.hypot(request.x, request.y);
        let vect = {x: request.x/dist, y: request.y/dist};
        this.x += vect.x * this.speed;
        this.y += vect.y * this.speed;
    }
    aimAt(position) { //probably just for the model
        let dist = Math.hypot(position.x, position.y);
        let vect = {x: position.x/dist, y: position.y/dist};

    }
}
