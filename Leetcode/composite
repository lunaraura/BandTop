const canvas = document.getElementById('canvas');
const ctx = canvas.getContext("2d");
const globalSpeed = 10;
const solid = "solid";
const liquid = "liquid";
const gas = "gas";
const plasma = "plasma";
const composites = {
    stone:       {name: "stone", matter: solid,  tough: 0.30, hard: 0.8, energy: 0.0, elastic: 0.0, heatResist: 0.40, coldResist: 0.35, chemResist: 0.6,
        electroResist: 1.0, density: 0.75},
    crystalline: {name: "crystalline", matter: solid,  tough: 0.15, hard: 0.9, energy: 0.0, elastic: 0.0, heatResist: 0.35, coldResist: 0.30, chemResist: 0.5,
        electroResist: 1.0, density: 0.75},
    metal:       {name: "metal", matter: solid,  tough: 0.80, hard: 0.7, energy: 0.0, elastic: 0.2, heatResist: 0.45, coldResist: 0.50, chemResist: 0.55,
        electroResist: 0.1, density: 0.75},
    //
    organicAnimal:{name: "organicAnimal", matter: solid, tough: 0.60, hard: 0.3, energy: 0.2, elastic: 0.7, heatResist: 0.30, coldResist: 0.25, chemResist: 0.20,
        electroResist: 0.3, density: 0.75},
    organicPlant: {name: "organicPlant", matter: solid, tough: 0.40, hard: 0.5, energy: 0.4, elastic: 0.6, heatResist: 0.25, coldResist: 0.20, chemResist: 0.15,
        electroResist: 0.4, density: 0.75},
    slime:       {name: "slime", matter: solid, tough: 0.50, hard: 0.1, energy: 0.4, elastic: 1.0, heatResist: 0.30, coldResist: 0.30, chemResist: 0.15,
        electroResist: 0.2, density: 0.75},
    //
    water:       {name: "water", matter: liquid, tough: 0.00, hard: 0.0, energy: 0.5, elastic: 1.0, heatResist: 0.8, coldResist: 0.10, chemResist: 0,
        electroResist: 0.1, density: 0.75},
    lava:        {name: "lava", matter: liquid, tough: 0.60, hard: 0.2, energy: 0.7, elastic: 0.3, heatResist: 1.0, coldResist: 0.05, chemResist: 3,
        electroResist: 0.6, density: 0.75},
    gas:         {name: "gas", matter: gas, tough: 0.00, hard: 0.0, energy: 0.8, elastic: 1.0, heatResist: 0.2, coldResist: 0.10, chemResist: 0.3,
        electroResist: 0.6, density: 0.75},
    fire:        {name: "fire", matter: plasma, tough: 0.00, hard: 0.0, energy: 0.9, elastic: 1.0, heatResist: 1.0, coldResist: 0.0, chemResist: 0.9,
        electroResist: 0.8, density: 0.75},
    frost:       {name: "frost", matter: gas, tough: 0.00, hard: 0.1, energy: 1.0, elastic: 0.0, heatResist: 0.0, coldResist: 1.0, chemResist: 0.9,
        electroResist: 0.8, density: 0.75},
    arcane:      {name: "arcane", matter: plasma, tough: 0.00, hard: 0.0, energy: 0.9, elastic: 1.0, heatResist: 1.0, coldResist: 0.0, chemResist: 0.9,
        electroResist: 0.5, density: 0.75},
}
//maybe if u supereffective the inner composite, monster faints ez
const modusEncephalus = { //or not, prob wont be used
    organicBrain: [composites.organicAnimal, composites.organicPlant, composites.slime],
    electroCPU: ["stone", "crystalline", "metal", "slime"],
    arcane: ["stone", "crystalline", "metal", "organicAnimal",
        "organicPlant", "slime", "lava", "gas", "fire", "frost", "arcane"],
}
const moveType = {
    electric: {matter: plasma, electro: 1.0}, 
    water: {matter: liquid, hard: 0.2, cold: 0.1},
    fire: {matter: plasma, heat: 0.9},
    cold: {matter: gas, cold: 0.9},
    corrode: {matter: liquid, hard: 0.5, chemical: 0.6},
    fumes: {matter: gas, chemical: 0.9},
    smash: {matter: solid, tough: 0.9, hard: 0.1, elastic: 0.2}, 
    slice: {matter: solid, tough: 0.1, hard: 0.9, elastic: 0.0},
    shockwave: {matter: solid, tough: 0.5, hard: 0.1, elastic: 0.5},
    drill: {matter: solid, tough: 0.2, hard: 0.1, elastic: 0.8},
}
const family = {
    canine: {baseIn: {type: composites.organicAnimal, variation: 0.3}, baseOut: {type: composites.organicAnimal, variation: 0.2}, modus: modusEncephalus.organicBrain},
    feline: {baseIn: {type: composites.organicAnimal, variation: 0.05}, baseOut: {type: composites.organicAnimal, variation: 0.2}, modus: modusEncephalus.organicBrain},
    reptile: {baseIn: {type: composites.organicAnimal, variation: 0.05}, baseOut: {type: composites.organicAnimal, variation: 0.2}, modus: modusEncephalus.organicBrain},
    bird: {baseIn: {type: composites.organicAnimal, variation: 0.05}, baseOut: {type: composites.organicAnimal, variation: 0.2}, modus: modusEncephalus.organicBrain},
    bug: {baseIn: {type: composites.organicAnimal, variation: 0.05}, baseOut: {type: composites.organicAnimal, variation: 0.2}, modus: modusEncephalus.organicBrain},
    spectre: {baseIn: {type: composites.gas, variation: 0.0}, baseOut: {type: composites.gas, variation: 0.2}, modus: modusEncephalus.arcane},
    elemental: {baseIn: {type: composites.arcane, variation: 0.0}, baseOut: {type: composites.organicAnimal, variation: 1.0}, modus: modusEncephalus.arcane},
} 
const species = {
    dog: {name: "dog", family: family.canine, baseSize: 5},
    wolf: {name: "wolf", family: family.canine, baseSize: 5},
}
const speciesInnateVariation = {
    canine: {pAtk:{t: 0.5, r: 5}, eAtk:{t: 0.5, r: 1}, mHP: {t: 0.5, r: 10},
        spd: {t: 0.5, r: 1}, def: {t: 0.5, r: 1}, castSpd: {t: 0.5, r: 1}},
    feline: {pAtk:{t: 0.5, r: 5}, eAtk:{t: 0.5, r: 1}, mHP: {t: 0.5, r: 10},
        spd: {t: 0.5, r: 1}, def: {t: 0.5, r: 1}, castSpd: {t: 0.5, r: 1}},
    reptile: {pAtk:{t: 0.5, r: 5}, eAtk:{t: 0.5, r: 1}, mHP: {t: 0.5, r: 10},
        spd: {t: 0.5, r: 1}, def: {t: 0.5, r: 1}, castSpd: {t: 0.5, r: 1}},
    bird: {pAtk:{t: 0.5, r: 5}, eAtk:{t: 0.5, r: 1}, mHP: {t: 1, r: 10},
        spd: {t: 0.5, r: 1}, def: {t: 0.5, r: 1}, castSpd: {t: 0.5, r: 1}},
    bug: {pAtk:{t: 0.5, r: 5}, eAtk:{t: 0.5, r: 1}, mHP: {t: 1, r: 10},
        spd: {t: 0.5, r: 1}, def: {t: 0.5, r: 1}, castSpd: {t: 0.5, r: 1}},
    spectre: {pAtk:{t: 1, r: 5}, eAtk:{t: 0.5, r: 1}, mHP: {t: 1, r: 10},
        spd: {t: 0.5, r: 1}, def: {t: 0.5, r: 1}, castSpd: {t: 0.5, r: 1}},
    elemental: {pAtk:{t: 1, r: 5}, eAtk:{t: 0.5, r: 1}, mHP: {t: 1, r: 10},
        spd: {t: 0.5, r: 1}, def: {t: 0.5, r: 1}, castSpd: {t: 0.5, r: 1}},
}
function makeRNG(seed=123456789){
    let s = seed >>> 0;
    return function rand(){
        s ^= s << 13; s >>>= 0;
        s ^= s >> 17; s >>>= 0;
        s ^= s << 5; s >>>= 0;
        return (s >>> 0) / 0xFFFFFFFF
    }
}
function generateEntity(species) {
    let seed = makeRNG(Math.round(Math.random() * 100000000));
    let random = seed();

    let thresholdIn = species.family.baseIn.variation;
    let thresholdOut = species.family.baseOut.variation;

    let originalIn = species.family.baseIn.type;
    let originalOut = species.family.baseOut.type;
    let modus = species.family.modus;

    let rolledInner = rollCompositeType(originalIn, thresholdIn, random, modus);
    let rolledOuter = rollCompositeType(originalOut, thresholdOut, random, composites);

    const entitySize = species.baseSize;
    const stats = inheritBaseStats(rolledInner, rolledOuter, entitySize);

    return {
        species: species.name,
        innerComposite: rolledInner,
        outerComposite: rolledOuter,
        stats: stats,
    };
}
//later, might use "exclude: [x, y, z]" properties or
//"only: [x, y]" properties to use instead of entire composite dictionary.
function rollCompositeType(baseComposite, variation, random, compositePool) {
    if (random < variation) {
        const availableComposites = Object.values(compositePool).filter(
            comp => comp.name !== baseComposite.name
        );
        const newComposite =
            availableComposites[Math.floor(Math.random() * availableComposites.length)];

        return { ...newComposite };
    }
    return { ...baseComposite };
}
function inheritBaseStats(innerComposite, outerComposite, entitySize, globalSpeed = 10) {
    const healthCalc = (comp, size) => (comp.tough + comp.hard + comp.elastic) * size;
    const physAtkCalc = (comp, size) => (comp.hard + comp.tough) * size;
    const energAtkCalc = (comp, size) => comp.energy * size;
    const defenseCalc = (comp, size) => comp.tough * size;
    const resistCalc = (comp, size) => ((comp.heatResist + comp.coldResist + comp.chemResist + comp.electroResist) / 4) * size;

    const maxHP = healthCalc(innerComposite, entitySize) + healthCalc(outerComposite, entitySize);
    const pAtk = physAtkCalc(innerComposite, entitySize) + physAtkCalc(outerComposite, entitySize);
    const eAtk = energAtkCalc(innerComposite, entitySize) + energAtkCalc(outerComposite, entitySize);
    const def = defenseCalc(innerComposite, entitySize) + defenseCalc(outerComposite, entitySize);
    const res = resistCalc(innerComposite, entitySize) + resistCalc(outerComposite, entitySize);
    const speed = globalSpeed / entitySize;
    console.log(maxHP)
    return {
        maxHP: Math.max(0, maxHP),
        pAtk: Math.max(0, pAtk),
        eAtk: Math.max(0, eAtk),
        def: Math.max(0, def),
        res: Math.max(0, res),
        speed: Math.max(0.1, speed),
    };
}
let dogEntity = generateEntity(species.dog);
console.log(dogEntity);
console.log(dogEntity.innerComposite)
console.log(dogEntity.outerComposite)
